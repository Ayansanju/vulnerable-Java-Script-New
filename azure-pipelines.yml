# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7a7e03b5-8510-4096-b0ae-a9d96a202624'
  imageRepository: 'VulnerableNode'
  containerRegistry: 'wsscontainerregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: CmdLine@2
      displayName:  OS Scanned By WhiteSource
      inputs:
       script: |
        curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar
        echo Unified Agent downloaded successfully
        java -jar wss-unified-agent.jar
      env:
        WS_APIKEY: 096db8ec-fefa-4e58-b9a0-e3413373d807
        WS_WSS_URL: https://saas.whitesourcesoftware.com/agent
        WS_PRODUCTNAME: AZDO_$(System.TeamProject)
        WS_PROJECTNAME: $(Build.DefinitionName)
        #WS_PROJECTNAME: $(Build.Repository.Name)_$(Build.SourceBranchName )
        
        WS_DOCKER_SCANIMAGES: true
        WS_DOCKER_INCLUDES: ".*$(imageRepository).*" 
        
        steps:
         - bash: |
            echo $(Build.ArtifactStagingDirectory)
            echo $(Build.BinariesDirectory)
            echo $(Build.BuildId)
            echo $(Build.BuildNumber)
            echo $(Build.BuildUri)
            echo $(Build.ContainerId)
            echo $(Build.DefinitionName)
            echo $(Build.DefinitionVersion)
            echo $(Build.QueuedBy)
            echo $(Build.QueuedById)
            echo $(Build.Reason)
            echo $(Build.Repository.Clean)
            echo $(Build.Repository.Git.SubmoduleCheckout)
            echo $(Build.Repository.ID)
            echo $(Build.Repository.LocalPath)
            echo $(Build.Repository.Name)
            echo $(Build.Repository.Provider)
            echo $(Build.Repository.Tfvc.Workspace)
            echo $(Build.Repository.Uri)
            echo $(Build.RequestedFor)
            echo $(Build.RequestedForEmail)
            echo $(Build.RequestedForId)
            echo $(Build.SourceBranch)
            echo $(Build.SourceBranchName)
            echo $(Build.SourcesDirectory)
            echo $(Build.SourceTfvcShelveset)
            echo $(Build.SourceVersion)
            echo $(Build.SourceVersionMessage)
            echo $(Build.StagingDirectory)
            echo $(Build.TriggeredBy.BuildId)
            echo $(Build.TriggeredBy.BuildNumber)
            echo $(Build.TriggeredBy.DefinitionId)
            echo $(Build.TriggeredBy.DefinitionName)
            echo $(Build.TriggeredBy.ProjectID)